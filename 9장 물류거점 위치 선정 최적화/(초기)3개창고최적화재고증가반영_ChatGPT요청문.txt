Pulp 라이브러리를 이용하여 최적해를 찾는다.
년간 총 물류비를 최소화하는 모든 소비도시에 물동을 공급하는 정확히 3개 창고 도시를 선택한다.
- 총 년간 물류비는 소비도시별 년간 물류비를 합산한 값이다. 
아래 내용을 수행하는 전체 파이썬코드만 제공한다.
필요한 정보는 '/content/sample_data/NW_MasterData.xlsx'에 있다.
[결과요청]을 참조하여 '/content/sample_data/OptimizationResult.xlsx'에 저장한다.
[파이썬코드의 데이터 입력 및 저장 경로]에 있는 읽을 데이터 및 결과 저장 위치를 파이썬코드에 반영한다.
후보창고 도시를 간단히 후보창고라고 한다. 후보창고는 'Cost' Sheet의 B에 있는 것 중에서만 선정한다.
후보창고에서 운송하는 물동의 도착지는 소비 도시이다.

- 소비 도시별 개별 년간 물류비(운송비, 수입물류비, 창고비)를 각각 계산한다. 모든 도시의 물동량을 합산하여 계산하지 않는다.
- 소비도시별 년간 물류비 = 소비도시와 후보창고간 운송비 + 소비도시의 후보창고 수입물류비 + 소비도시의 후보 창고 년간 창고비

물동량 단위는 모두 박스이다.

### 운송비 공식:
- 소비도시와 후보창고간 운송비 = 소비도시의 물동량 * 소비도시와 후보창고 간 거리 * 후보창고의 박스당 운송비
- 소비도시의 물동량은 연간 물동량으로 하며, 'City' 시트의 Cargo 열에서 가져온다.
- 동일 도시 간 거리를 16km로 적용하여 동일 도시 간 운송비가 0으로 계산되지 않도록 한다.
- 창고와 소비도시간 거리는 'Distance' 시트의 E열 'Distance' 값을 사용한다.
- 거리 계산 시 반드시 'Distance' Sheet에 있는 거리 정보만 사용한다. 누락된 거리 데이터가 있는 경우 알람을 준다.
- 창고에서 소비 도시로의 거리만을 사용한다.
  - 창고와 소비 도시 간 거리 데이터를 참조할 때 **출발 도시와 도착 도시의 순서를 정확히 유지**하여, 
    각 도시 간 올바른 거리 정보를 사용한다.
  - 예: 'PortlandORToNew YorkNY'과 'New YorkNYToPortlandOR'가 다른 값을 가질 수 있으므로 순서에 맞는 거리를 참조해야 한다.
- 후보창고 도시별 박스당 운송비는 'Cost' 시트의 E열에 있다.

### 수입물류비 공식:
- 소비도시의 후보 창고 수입물류비 = 소비도시의 수요 물동량 * 후보창고의 박스당 수입물류비 ('Cost' 시트의 D열)
- 수입물류비는 소비 도시가 아닌 후보창고의 박스당 수입물류비를 반드시 참조해야 한다.

### 창고비 공식:
- 소비도시의 후보 창고 년간 창고비
  = (소비도시의 물동량 / 재고회전율) * 후보창고의 박스당 월 창고비 * 12개월 * sqrt(3)
- 재고회전율은 12이다.
- 창고 개수는 3개로 고정되어 있으므로, 제곱근 법칙에 따라 평균 재고 증가를 고려해 반드시 sqrt(3)을 곱하여 반영할 것.
- 박스당 월 창고비는 'Cost' 시트의 F열에 있다.
- 창고비 계산 시 **후보 창고(최적화된 창고)**의 박스당 창고비만 반드시 사용한다.

박스당 수입물류비는 하나의 박스를 수입하는데 소요되는 비용이다.
박스당 운송비는 하나의 박스를 1km 운반하는 비용이다.
박스당 창고비는 하나의 박스를 1개월 동안 창고에서 운영하는 창고 비용이다.
소비 도시의 년간 수요 물동량은 'City' Sheet의 H열에 있다.
소비 도시는 'City' Sheet에 있다.
소비 도시는 반드시 단지 하나의 창고로부터만 물동을 공급받는다.
창고비는 월 평균재고에 대한 월 소요되는 비용이다.
평균재고는 재고회전율 12를 통해서 구한다.

[점검내용]
- 창고와 소비 도시가 같은 경우 운송비가 0인지 확인한다.
- 창고와 소비 도시가 같은 경우의 운송비는 0이 아니다.
- 동일 도시내 거리인 16km를 적용한다.
- 창고비는 12개월을 곱해서 년간 창고비인지 확인한다.
- 창고 개수 고정(3개)에 따라 창고비에 sqrt(3) 곱했는지 확인한다.

[결과요청]
OptimizationResult.xlsx의 'City' Sheet에 소비도시, 물동량, 총 물류비, 선택된 창고, 운송비, 수입물류비, 창고비를 기록한다.
- 모든 소비도시를 반드시 나열하고, 소비도시의 물동량에 대한 최적 창의 개별 물류비를 나열한다.
- 선택된 창고는 최적화 결과로 도출된 하나의 창고만 반영한다.

OptimizationResult.xlsx의 'WH' Sheet에 선택된 창고별 운송비, 수입물류비, 창고비 및 총물류비 합계를 기록한다.
- 선택된 창고의 운송비, 수입물류비, 창고비 및 총 물류비 합계를 기록한다.
- 각 창고별 **수요박스 개수**를 '창고' 컬럼 다음 열로 반드시 추가하고, 엑셀 저장 및 화면 출력 결과에도 포함할 것.
- 다른 후보 창고는 포함하지 않도록 주의한다.

OptimizationResult.xlsx의 'Summary' Sheet에 최적화된 창고 전체의 운송비, 수입물류비, 창고비 및 총물류비 합계를 기록한다.

- 'Summary' Sheet 내용도 테이블 형태로 화면에 출력한다.
- 'WH' Sheet 내용도 테이블 형태로 화면에 출력한다.
- 'City' Sheet에서 생성된 최종 선택된 하나의 창고에서 소비도시 New YorkNY까지의 운송비, 수입물류비, 창고비 및 총 물류비 합계를 테이블 형태로 화면에 출력한다.

[파이썬코드의 데이터 입력 및 저장 경로]
'/content/sample_data/NW_MasterData.xlsx'
'/content/sample_data/OptimizationResult.xlsx'

[파이썬코드 참조내용]
- xlsxwriter 대신에 openpyxl을 사용한다.
- ace_tools.을 사용하지 않는다.
- 비용 데이터와 거리 데이터를 미리 딕셔너리로 변환해 반복적인 조회를 줄인다.
